5.1 计算机中的“ISA”和“µarch”各是什么意思？两者之间有何联系？
ISA指计算机的指令体系结构,µarch指微架构。
µarch是ISA的硬件实现方式。

5.2 请简述哈佛结构的主要优缺点。
优点：
将程序和数据分别独立存取，指令可以和数据并行传送；可以消除流水线上取址的资源相关。
缺点：
结构更复杂，与外设和外部扩展存储器连接难度更大。

5.3 TCM与高速缓存Cache有什么区别？
TCM有物理地址，需要占用内存空间，没有Cache的不可预测性；一般存放需要快速执行的程序和寄存器数据、局部属性不适合告诉缓存的数据等。

5.5 ARM指令集、Thumb指令集和Thumb-2指令集之间的主要区别是什么？
Thumb是32位ARM指令集中最常用的部分功能经过重新编码和压缩形成的16位新指令集，代码密度比ARM更高，在8/16位的IO接口上运行性能比ARM更快
Thumb2则是结合了ARM和Thumb指令优点的改进版本

5.6 MMU和MPU的功能有何异同？
两者都是用于内存管理。
MMU更为先进，有内存分页转化和虚拟地址到物理地址的转化，支持MPU的功能，开销更低，适用于多系统。

5.9 Cortex-M系列处理器定义的存储器映射关系是固定不变的，这样做有何利弊？
有助于提高基于cortex-M系列设备的软件可移植性和代码可重用性；
但可能降低了架构的灵活性，不利于后期调整。

5.10 Cortex-M3与Cortex-M4使用两个堆栈的目的是什么？在中断响应时，程序断点和程序状态寄存器的内容保存在哪个堆栈中？
该处理器有处理模式和线程模式，分别对应不同特权等级和对应的操作；两个堆栈的目的是在线程模式可以使用独立的进程堆栈指针，使应用程序的栈空间和操作系统的栈空间独立，提高可靠性。
保存在主堆栈中。

5.11 Cortex-M3/M4的CODE区选用总线互连矩阵与总线复用器有什么区别？
总线互联矩阵：ICODE对FLASH的取指操作与D-Code和D对SRAM的数据存取操作可以同时进行；
总线复用器：I-CODE和D-CODE对CODE区域的访问只能分时复用，不能并行。

5.13 Cortex-M3/M4从SRAM域读取指令执行时有什么缺点？
从SRAM区域读取指令效率更低。

5.14 I-Code和D-Code总线全部连接到同一片Flash芯片上会有什么问题？
由于无法并行操作，会造成冲突，效率降低。

5.15 私有外设总线（Private Peripheral Bus，PPB）基于哪种总线协议，有何特点？
基于APB协议。
此总线是专用的，不用于普通外设。

5.16 如果非特权线程试图访问内核私有区域，将会导致哪一类异常？如果Cortex-M3使用了一条SIMD运算指令，结果又将如何？
4 内存管理错误
cortex-M3没有浮点运算、DSP等协处理器，会引发6用法错误
 
5.17 在Cortex-M3/M4中，寄存器R0~R12有何异同？如果这些寄存器都是空闲的，你觉得首先使用哪些？为什么？
R0-R7为低位寄存器，R8-R12为高位寄存器，但都是通用寄存器。
优先用低位寄存器，因为低位使用比较频繁，优先低位可以降低功耗。

5.20 请说明特殊寄存器PRIMASK和FAULTMASK寄存器的异同。
FAULTMASK无需主动清理，错误处理程序运行结束返回时，会自动复位FAULTMASK；
PRIMASK最低位写入1后会屏蔽除复位、NMI和硬件错误以外所有的系统异常和外部中断。
两者都属于实现1位基于优先权一场、中断寄存器。

5.22 某基于Cortex-M4的SOC芯片共有64级外部中断，BASEPRI寄存器的宽度共有几位？如果想屏蔽所有优先级大于16的中断，请写出对BASEPRI寄存器进行设置的汇编指令。如果想屏蔽所有优先级大于0的中断，又该如何设置？
BASEPRI 7:2一共6位
MOV R0, #0x00000004
MOV BASEPRI, R0

MOV R0, #0x00000001
MOV PRIMASK, R0

5.23 有人写了一段对Cortex-M4的进程栈进行初始化的代码，其中PSP的初始值设为0x8765 4321，并且使用了如下一条语句：“MOV​PSP,​ R0”对PSP进行赋值（其中R0=0x8765 4321）。这样做存在哪些问题？请逐一说明。
堆栈操作以字为单位，PSP的初始值却没有做到字对齐；
MSP和PSP只能用专门的MSR、PSR指令来访问。

5.25 在特权线程模式下如何切换到非特权线程模式？在非特权线程模式下能否采用类似方法切换到特权线程模式？为什么？
特权线程模式下，可以直接修改CONTROL寄存器nPRIV=1，直接进入非特权模式；
非特权模式下，要通过异常状态进入异常处理，在异常处理时修改nPRIV=0来进入特权线程模式。
 
5.29 Cortex-M3存储空间的哪些区域支持位段（bit-band）操作？
SRAM区域和片上外设区域。

5.31 写出利用位段操作读取0x4000 1000的第3位的代码。
LDR R0, 0x42020008
LDR R1, [R0]

5.32 存储器访问属性包括哪些？
可缓冲、可缓存、可执行、可共享

5.35 Cortex-M系列处理器不会改变代码的执行顺序，因而不需要存储器屏障指令，这个观点对吗？为什么？
不对。该系列存储器引入缓存，虽然存储器系统不会改变指令执行的顺序，但是顺序执行指令的存储器访问操作完成的时间先后顺序是不定的，需要存储器屏障来保证顺序正确。

5.36 处理器进入异常处理子程序之前保护现场需要把哪些寄存器的值保护起来？
PSR PC LR R0 R1 R2 R3 R12

5.38 解释Cortex-M处理器的中断优先级分组机制。
8位优先级哦诶之寄存器分为分组优先级和组内优先级。分组优先级对应抢占优先级；当分组优先级相同时，足内优先级更高的异常会优先处理。

5.39 解释向量表重定位机制。
向量表重定位用VTOR指向向量表的位置，保存向量表对应存储器的偏移量；
处理器可以修改VTOR的值来修改向量表的起始位置来实现向量表重定位。